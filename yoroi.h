#ifndef YOROI_H
#define YOROI_H

#include <stdio.h>

typedef unsigned int u32;
typedef unsigned long u64;
typedef unsigned char u8;

// get the lsb4 of 8-bit
#define GETU4(p) ((u8)(p)&0xf)

// update the lsb4 of 8-bit
#define PUTU4(p, v) ((p) = (((u8)(p)&0xf0) ^ ((u8)(v)&0x0f)))

// concatenation of u4 p,v
#define MERGEU4(p, v) (((u8)(p) << 4) + ((u8)(v)&0xf))

// concatenation of u8 p,v
#define MERGEU8(p, v) (((u32)(p) << 8) + ((u32)(v)&0xff))

// split u16 u into u8 p,v
#define SPLITU16(u, p, v) ((p) = (u8)((u) >> 8), v = (u8)((u)&0xff))

// the 8x8 MDS matrix for yoroi-16
static const u8 M_88[] = {5, 4, 0xa, 6, 2, 0xd, 8, 3, 4, 5,   6,   0xa, 0xd, 2,
                          3, 8, 0xa, 6, 5, 4,   8, 3, 2, 0xd, 6,   0xa, 4,   5,
                          3, 8, 0xd, 2, 2, 0xd, 8, 3, 5, 4,   0xa, 6,   0xd, 2,
                          3, 8, 4,   5, 6, 0xa, 8, 3, 2, 0xd, 0xa, 6,   5,   4,
                          3, 8, 0xd, 2, 6, 0xa, 4, 5};
static const u8 MINV_88[] = {7,  3,  14, 11, 8,  1, 6, 12, 3,  7,  11, 14, 1,
                             8,  12, 6,  14, 11, 7, 3, 6,  12, 8,  1,  11, 14,
                             3,  7,  12, 6,  1,  8, 8, 1,  6,  12, 7,  3,  14,
                             11, 1,  8,  12, 6,  3, 7, 11, 14, 6,  12, 8,  1,
                             14, 11, 7,  3,  12, 6, 1, 8,  11, 14, 3,  7};

// mul a,b in GF(2^4) is equal to gf4mul[a<<4 + b]
static const u8 gf4mul[] = {
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  2,
    3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14, 15, 0,  2,  4,  6,  8,  10,
    12, 14, 3,  1,  7,  5,  11, 9,  15, 13, 0,  3,  6,  5,  12, 15, 10, 9,  11,
    8,  13, 14, 7,  4,  1,  2,  0,  4,  8,  12, 3,  7,  11, 15, 6,  2,  14, 10,
    5,  1,  13, 9,  0,  5,  10, 15, 7,  2,  13, 8,  14, 11, 4,  1,  9,  12, 3,
    6,  0,  6,  12, 10, 11, 13, 7,  1,  5,  3,  9,  15, 14, 8,  2,  4,  0,  7,
    14, 9,  15, 8,  1,  6,  13, 10, 3,  4,  2,  5,  12, 11, 0,  8,  3,  11, 6,
    14, 5,  13, 12, 4,  15, 7,  10, 2,  9,  1,  0,  9,  1,  8,  2,  11, 3,  10,
    4,  13, 5,  12, 6,  15, 7,  14, 0,  10, 7,  13, 14, 4,  9,  3,  15, 5,  8,
    2,  1,  11, 6,  12, 0,  11, 5,  14, 10, 1,  15, 4,  7,  12, 2,  9,  13, 6,
    8,  3,  0,  12, 11, 7,  5,  9,  14, 2,  10, 6,  1,  13, 15, 3,  4,  8,  0,
    13, 9,  4,  1,  12, 8,  5,  2,  15, 11, 6,  3,  14, 10, 7,  0,  14, 15, 1,
    13, 3,  2,  12, 9,  7,  6,  8,  4,  10, 11, 5,  0,  15, 13, 2,  9,  6,  4,
    11, 1,  14, 12, 3,  8,  7,  5,  10};

#endif